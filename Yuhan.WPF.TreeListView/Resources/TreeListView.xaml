<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:local="clr-namespace:Yuhan.WPF">

    <Style x:Key="ListViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeThickness="1"
                               RadiusX="2"
                               RadiusY="2"
                               Stroke="#8E6EA6F5"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="ListItemHoverFill"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFF1FBFF"
                          Offset="0"/>
            <GradientStop Color="#FFD5F1FE"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ListItemSelectedFill"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFD9F4FF"
                          Offset="0"/>
            <GradientStop Color="#FF9BDDFB"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ListItemSelectedHoverFill"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFEAF9FF"
                          Offset="0"/>
            <GradientStop Color="#FFC9EDFD"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ListItemSelectedInactiveFill"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFEEEDED"
                          Offset="0"/>
            <GradientStop Color="#FFDDDDDD"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <local:LevelToIndentConverter x:Key="LevelToIndentConverter"/>

    <Style TargetType="{x:Type local:TreeListViewItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TreeListViewItem}">
                    <StackPanel x:Name="HeaderBorder" >
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames
                                        Storyboard.TargetProperty="(UIElement.Visibility)"
                                        Storyboard.TargetName="ItemsHost">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetName="ItemsHost"
                                                         Storyboard.TargetProperty="Opacity"
                                                         Duration="0:0:1" From="0" To="1">
                                            <DoubleAnimation.EasingFunction>
                                                <QuadraticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="ItemsHostTranslateTransform"
                                                         Storyboard.TargetProperty="X"
                                                         Duration="0:0:0.5" From="15" To="0">
                                            <DoubleAnimation.EasingFunction>
                                                <QuadraticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border Name="Bd"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      Padding="{TemplateBinding Padding}"
                                CornerRadius="2" SnapsToDevicePixels="True">
                            <Border Name="InnerBorder"
                                CornerRadius="1"
                                BorderThickness="1">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition MaxHeight="11"/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Rectangle Name="UpperHighlight"
                                           Visibility="Collapsed"
                                           Fill="#75FFFFFF"/>
                                    <GridViewRowPresenter x:Name="PART_Header" Grid.RowSpan="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    Content="{TemplateBinding Header}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Columns="{Binding ColumnCollection, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:TreeListView}}}" />
                                </Grid>
                            </Border>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Visibility="Collapsed" RenderTransformOrigin="0.5,0.5" >
                            <ItemsPresenter.RenderTransform>
                                <TranslateTransform X="15" x:Name="ItemsHostTranslateTransform"/>
                            </ItemsPresenter.RenderTransform>
                        </ItemsPresenter>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    Value="{StaticResource ListItemHoverFill}"/>
                            <Setter Property="BorderBrush"
                                    Value="#FFCCF0FF"/>
                            <Setter TargetName="UpperHighlight"
                                    Property="Visibility"
                                    Value="Visible"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                             Value="false"/>
                                <Condition Property="Width"
                             Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                        Property="MinWidth"
                        Value="75"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader"
                             Value="false"/>
                                <Condition Property="Height"
                             Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header"
                        Property="MinHeight"
                        Value="19"/>
                        </MultiTrigger>
                        <Trigger Property="IsSelected"
                       Value="true">
                            <!--<Setter TargetName="Bd"
                        Property="Background"
                        Value="{DynamicResource 
                          {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground"
                        Value="{DynamicResource 
                          {x:Static SystemColors.HighlightTextBrushKey}}"/>-->
                            <Setter Property="Background"
                                    Value="{StaticResource ListItemSelectedFill}"/>
                            <Setter Property="BorderBrush"
                                    Value="#FF98DDFB"/>
                            <Setter TargetName="InnerBorder"
                                    Property="BorderBrush"
                                    Value="#80FFFFFF"/>
                            <Setter TargetName="UpperHighlight"
                                    Property="Visibility"
                                    Value="Visible"/>
                            <Setter TargetName="UpperHighlight"
                                    Property="Fill"
                                    Value="#40FFFFFF"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                             Value="true"/>
                                <Condition Property="IsSelectionActive"
                             Value="false"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="Bd"
                        Property="Background"
                        Value="{DynamicResource 
                          {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground"
                        Value="{DynamicResource 
                          {x:Static SystemColors.ControlTextBrushKey}}"/>-->
                            <Setter Property="Background"
                                    Value="{StaticResource ListItemSelectedInactiveFill}"/>
                            <Setter Property="BorderBrush"
                                    Value="#FFCFCFCF"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true"/>
                                <Condition Property="IsMouseOver"
                                           Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    Value="{StaticResource ListItemSelectedHoverFill}"/>
                            <Setter Property="BorderBrush"
                                    Value="#FF98DDFB"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                       Value="false">
                            <Setter Property="Foreground"
                        Value="{DynamicResource 
                          {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource ListViewItemFocusVisual}"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="BorderBrush"
                Value="Transparent"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Margin"
                Value="0,0,0,1"/>
        <!--<Setter Property="Padding"
                Value="5,2,5,2"/>-->
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
    </Style>

    <Style TargetType="{x:Type local:TreeListView}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TreeListView}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer VerticalScrollBarVisibility="Disabled" Background="{x:Null}" BorderBrush="Transparent" BorderThickness="0" IsTabStop="False">
                            <DockPanel>
                                <GridViewHeaderRowPresenter Columns="{TemplateBinding ColumnCollection}"
                                                DockPanel.Dock="Top"/>
                                <ScrollViewer x:Name="ScrollViewer" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Auto" Background="{x:Null}" BorderBrush="Transparent" BorderThickness="0" IsTabStop="False" >
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </DockPanel>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpandCollapseToggleStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable"
              Value="False"/>
        <Setter Property="Width"
              Value="19"/>
        <Setter Property="Height"
              Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="19"
                    Height="13"
                    Background="Transparent">
                        <Border Width="9"
                      Height="9"
                      BorderThickness="1"
                      BorderBrush="#FF7898B5"
                      CornerRadius="1"
                      SnapsToDevicePixels="true">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0"
                                       EndPoint="1,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Color="White"
                                    Offset=".2"/>
                                        <GradientStop Color="#FFC0B7A6"
                                    Offset="1"/>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Path x:Name="ExpandPath"
                      Margin="1,1,1,1"
                      Fill="Black"
                      Data="M 0 2 L 0 3 L 2 3 L 2 5 L 3 5 L 3 3 
                            L 5 3 L 5 2 L 3 2 L 3 0 L 2 0 L 2 2 Z"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                       Value="True">
                            <Setter Property="Data"
                        TargetName="ExpandPath"
                        Value="M 0 2 L 0 3 L 5 3 L 5 2 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="CellTemplate" DataType="{x:Type local:TreeGridViewColumn}">
        <DockPanel>
            <ToggleButton x:Name="Expander" 
                      Style="{StaticResource ExpandCollapseToggleStyle}" 
                      Margin="{Binding Level,
                             Converter={StaticResource 
                                        LevelToIndentConverter},
                             RelativeSource={RelativeSource 
                                             AncestorType=
                                             {x:Type local:TreeListViewItem}}}"
                      IsChecked="{Binding Path=IsExpanded,
                                 RelativeSource={RelativeSource 
                                                 AncestorType=
                                                  {x:Type local:TreeListViewItem}}}"
                      ClickMode="Press" />
            <ContentControl Name="ContentControl" Content="{Binding }" 
                            ContentTemplate="{Binding Path=ContentTemplate, Mode=TwoWay,
                            RelativeSource={RelativeSource 
                            AncestorType= {x:Type local:TreeGridViewColumn}}}"/>
        </DockPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=HasItems,
                               RelativeSource={RelativeSource 
                               AncestorType={x:Type local:TreeListViewItem}}}" 
                     Value="False">
                <Setter TargetName="Expander"
                  Property="Visibility"
                  Value="Hidden"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
</ResourceDictionary>